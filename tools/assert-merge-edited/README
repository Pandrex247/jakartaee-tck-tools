Disclaimer
----------
This tool should be used by CTS developers that have hand edited
their API assertion document and added additional assertions not
generated by the assert-gen tool.  If you have NOT manually added
assertions to your API assertion document use the assert-merge
tool instead of this tool.

Overview
--------
This directory contains a utility to merge Javadoc (API) assertion lists.
The utility takes two input files and produces a single output file.
The first input file is a verified assertion list.  This is a list
of Javadoc assertions that has been reviewed and verified to be
correct.  The second input file is a generated Javadoc assertion list.
This file is the result of running the assertion generation tool on
a technology area's source code.  The output of the tool is a file
that contains a merged assertion list.  This output file is then
reviewed and verified by hand.  All files conform to the
javadoc_assertion DTD located at:
http://invalid.domain.com/CTS/XMLassertions/dtd/javadoc_assertions.dtd

This version of the assertion merge tools supports assertion documents
that contain multiple assertions for a single method signature.  The
merge tool can't tell you what assertions are modified but it will tell
what assertions may have been removed from one version of the API to
the next as well as deprecated assertions and removed assertions.

Currently, this tool only supports Javadoc (API) assertion lists.  There
is no support for specification assertions.  This is due to the fact that
specification assertions are generated by hand and will therefore not
benefit from an automated tool to merge hand editied documents.

Application Hueristics
----------------------
First all deprecated assertions are identifed and written to the output
document.  If an assertion appears in the new list and is marked as
deprecated, that assertion will be written to the output doc followed
by every assertion in the old list with the same method signature.
Next, all existing assertions are identified.  Every assertion in the
new list that has at least one matching assertion in the old list is
written to the existing assertion section of the output document.
Following each existing assertion will be a list of all the assertions
in the old list who's method signature match new assertion.
Next, all removed assertions are identified.  The removed assertions
are assertions that appear in the old list but do not appear in the
new list.  Finally, all new assertions are written to the output document.
These are the assertions that appear in the new list but are not in the
old list.

Ant Targets
-----------
Current list of ant build targets:
compile (default): Builds the tool and any necessary components
clean            : Removes any built components
run              : Runs the merge tool, users must specify the two input
                   files and the resulting output file using relative or
                   absolute paths


Usage Statement
---------------
ant run -Dverfile=verified_file -Dnewfile=new_file -Doutfile=output_file


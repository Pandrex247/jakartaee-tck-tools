/*
 * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package com.sun.cts.utils.assertion.edit;

import java.io.*;
import java.util.*;
import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.*;
import com.sun.cts.api.data.*;

/**
 * This class is the entry point for a utility to merge Javadoc (API)
 * assertion lists.  The utility takes two input files and produces a
 * single output file.  The first input file is a verified assertion
 * list.  This is a list of Javadoc assertions that has been reviewed
 * and verified to be correct.  The second input file is a generated
 * Javadoc assertion list.  This file is the result of running the
 * assertion generation tool on a technology area's source code.
 * The output of the tool is a file that contains a merged assertion
 * list.  This output file is then reviewed and verified by hand.
 * All files conform to the javadoc_assertion DTD located at:
 * http://invalid.domain.com/CTS/XMLassertions/dtd/javadoc_assertions.dtd
 * </p>
 * Currently, this tool only supports Javadoc (API) assertion lists.
 * There is no support for specification assertions.  This is due to
 * the fact that specification assertions are generated by hand and
 * will therefore not benefit from an automated tool to merge hand
 * editied documents.
 * </p>
 * This class kicks off the merge process and is reponsible for
 * initializing the other classes that make up the merge tool.
 * The basic steps used to merge assertion documents is:
 * </p>
 * Find assertions that exist in both input documents and
 * pass them through to the output document.   
 * </p>
 * Find all the new assertions in the non-verified document
 * and pass them through to the output document (new assertions).
 * </p>
 * All the remaining assertions in the verified document must
 * have been removed from the newly generated assertion list.
 * So we mark them as deleted assertions and pass them through
 * to the ouput document.
 * </p>
 * Renumber the assertions in the output document.  At this point
 * someone must hand verify the correctness of the merged assertion
 * list.
 * </p>
 *
 * @author <a href="mailto:ryano@caseylou.east">Ryan O'Connell - CTS</a>
 * @version 1.0
 */
public class MergeAssert {

    private static final String USAGE  = 
	"ant run -Dverfile=verified_file -Dnewfile=new_file -Doutfile=output_file";
    private static final String INDENT = "  ";
    private static final String ENCODING = "US-ASCII";
    private static final String DEFAULT_FILE_NAME = "/tmp/MergeAssert.xml";

    private File                 verifiedFile;
    private File                 newFile;
    private File                 outputFile;
    private JavadocAssertionList verifiedList;
    private JavadocAssertionList newList;
    private MergedAssertionList  mergedList;

    private boolean isValidFile(File file) {
	return (file.exists() && file.isFile());
    }

    /**
     * Creates a new <code>MergeAssert</code> instance.
     *
     * @param verifiedFile a <code>File</code> value that represents the
     *        verified assertion list
     * @param newFile a <code>File</code> value that represents the
     *        newly generated assertion list
     * @param outputFile a <code>File</code> value that will hold the
     *        merged assertion lists
     */
    public MergeAssert(File verifiedFile, File newFile, File outputFile) {
	if (! isValidFile(verifiedFile)) {
	    System.out.println("Error, No such file \"" + verifiedFile + "\"");
	    System.exit(1);
	}
 	if (! isValidFile(newFile)) {
 	    System.out.println("Error, No such file \"" + newFile + "\"");
 	    System.exit(1);	    
 	}
	this.verifiedFile = verifiedFile;
	this.newFile      = newFile;
	this.outputFile   = outputFile;
    }

    /**
     * Creates a new <code>MergeAssert</code> instance.
     *
     * @param verifiedFile a <code>File</code> value that represents the
     *        verified assertion list
     * @param newFile a <code>File</code> value that represents the
     *        newly generated assertion list
     * @param outputFile a <code>File</code> value that will hold the
     *        merged assertion lists
     */
    public MergeAssert(String verifiedFile, String newFile, String outputFile) {
	this(new File(verifiedFile), new File(newFile), new File(outputFile));
    }

    /**
     * The <code>parseDoc</code> method parses the specified XML document.
     *
     * @param file a <code>File</code> to be parsed
     * @return a <code>Document</code> value representing the DOM of the specified file
     * @exception Exception if an error occurs
     */
    private Document parseDoc(File file) throws Exception {
	SAXBuilder builder = new SAXBuilder(true);
	Document doc = builder.build(file);
	return doc;
    }

    /**
     * The <code>writeDocumentToFile</code> method writes the specified DOM tree
     * out to the specified file.
     *
     * @param doc a <code>Document</code> to be written out
     * @param outfile a <code>File</code> to write the XML document to
     * @exception IOException if an error occurs
     */
    private void writeDocumentToFile(Document doc, File outfile)
	throws IOException
    {
        Format f = Format.getPrettyFormat();
	f.setEncoding(ENCODING);
	f.setIndent(INDENT);
	XMLOutputter out = new XMLOutputter(f);
	BufferedOutputStream outStream = null;
	FileOutputStream fout = null;
	try {
	    fout = new FileOutputStream(outfile);
	} catch (FileNotFoundException fnfe) {
	    fout = new FileOutputStream(DEFAULT_FILE_NAME);
	}
	try {
	    outStream = new BufferedOutputStream(fout);
	    out.output(doc, outStream);
	} finally {
	    try { outStream.close(); } catch (Exception e) {}
	}
	System.out.println(Globals.NEW_LINE
			   + "Lists merged, document written to \""
			   + outfile + "\"");
    }

    /**
     * The <code>mergeDocs</code> method actual merges the contents of
     * two specified assertion documents.  The merge method first looks
     * for assertion that appear in both assertion documents that are
     * considered equal.  The common assertions are then checked to
     * see if any common assertions have been deprecated.  Only common
     * assertions that are active should be deprecated.  It is the only
     * transition that makes sense.  next the modified assertions are
     * found. These are assertions that are identical in both lists
     * except for their description.  These assertions are assumed to
     * be assertions who's javadoc comments have changed but who's signature
     * remained the same.  The old assertion and the new assertion are both
     * copied to the output file.  the user must then review the output
     * file to decide which of the two versions stays in the output file.
     * Removed assertions are found next.  These are copied to the output
     * document.  Finally new assertions are found.  These are copied to the
     * output document and numbered using the next available ID.  The
     * output file is then streamed out to disk as an XML file.
     *
     * @exception Exception if an error occurs
     */
    public void mergeDocs() throws Exception {
	System.out.println("Parsing verified and new assertion lists");
	createAssertionLists(); // build all three lists
	System.out.println("Checking verified and new assertion list preconditions");
	verifiedList.checkPreconditions(); // no modified assertions
	newList.checkPreconditions(); // no modified assertions
	System.out.println("Finding \"common\" and \"deprecated\" assertions");
	findCommonAndDeprecatedAssertions();
	System.out.println("Finding \"removed\" assertions");
	findRemovedAssertions();
	System.out.println("Finding \"new\" assertions");
	findNewAssertions();
	System.out.println("Writing \"merged\" assertion list");
	System.out.println();
	System.out.println();
	Document doc = this.mergedList.toXML();
	writeDocumentToFile(doc, outputFile);
	writeSummary();
    }

    /**
     * The <code>assertSummary</code> method writes the specified string to stdout.
     * If count is greater than one an 's' is appended to teh message.
     *
     * @param count an <code>int</code> value denoting count value
     * @param message a <code>String</code> message that may need an 's' appended
     */
    private void assertSummary(int count, String message) {
	if (count == 1) {
	    System.out.println("\t* " + count + " " + message);
	} else if(count > 1) {
	    System.out.println("\t* " + count + " " + message + "s");
	}
    }

    /**
     * The <code>writeSummary</code> method writes a brief summary to stdout
     * describing the number of assertions found and their types.
     */
    private void writeSummary() {
	System.out.println();
	System.out.println("Assertion Counts");
	System.out.println("----------------");
	assertSummary(mergedList.numDeprecated(), "deprecated assertion");
	assertSummary(mergedList.numCommon(), "common assertion");
	assertSummary(mergedList.numRemoved(), "removed assertion");
	assertSummary(mergedList.numNew(), "new assertion");
	System.out.println();
    }

    /**
     * The <code>createAssertionLists</code> method initializes the assertion lists.
     *
     * @exception Exception if an error occurs
     */
    private void createAssertionLists() throws Exception {
	Document verifiedFileDOM = parseDoc(verifiedFile);
	Document newFileDOM      = parseDoc(newFile);
	this.verifiedList        = new JavadocAssertionList(verifiedFileDOM);
	this.newList             = new JavadocAssertionList(newFileDOM);
	this.mergedList          = new MergedAssertionList(verifiedList);
    }

    /**
     * Extract the common assertions from the verified and new
     * assertion lists.  Any assertion that appears in both lists
     * should be added to the merged assertion list.  The common
     * assertions should then be removed from the verified and
     * new assertion lists so they will not be processed again.
     *
     * Commanilty is defined by the equals method in the
     * JavadocAssertion class.
     */
    private void findCommonAndDeprecatedAssertions() {
	JavadocAssertion   newAssertion  = null;
	JavadocAssertion[] newAssertions = newList.getAssertions();
	for (int i = 0; i < newAssertions.length; i++) {
	    newAssertion = newAssertions[i];
	    List matchingAssertions = verifiedList.getMatchingAssertions(newAssertion);
	    if (matchingAssertions.size() > 0) {
		if (newAssertion.isDeprecated()) {
		    mergedList.addDeprecatedAssertion(newAssertion, matchingAssertions);
		} else {
		    mergedList.addCommonAssertion(newAssertion, matchingAssertions);
		}
		verifiedList.removeAssertions(matchingAssertions);
		newList.removeAssertion(newAssertion);
	    }
	}
    }

    /**
     * The <code>numberAssertions</code> method numbers the
     * assertions in the specified list.
     *
     * @param list a <code>List</code> of JavadocAssertion elements
     *        that require numbering
     */
    private void numberAssertions(List list) {
	int num = list.size();
	JavadocAssertion a = null;
	int counter = mergedList.getStartID();
	String prefix = mergedList.getPrefix();
	for (int i = 0; i < num; i++) {
	    a = (JavadocAssertion)list.get(i);
	    String id = prefix + Integer.toString(counter);
	    a.setID(id);
	    a.setModified(true);
	    counter++;
	}
	// update the counters sent to the output file
	mergedList.setNextAvailableID(counter);
    }

    /**
     * This method simply pulls the remaining assertions from the
     * new assertion list.  These remaining assertions must be new since
     * they did not match any assertions in the verified list.  After
     * finding the assertions they are numbered and copied to the merged
     * assertion list.
     */
    private void findNewAssertions() {
	List newAssertions = newList.getAssertionList();
	if (newAssertions == null || newAssertions.size() == 0) {
	    return;
	}
	numberAssertions(newAssertions);
	mergedList.addNewAssertions(newAssertions);
	newList.removeAssertions(newAssertions);
	if (newList.size() != 0) {
	    System.err.println("The new assertion list still has "
			       + newList.size() +
			       " assertions in it.  This could be an error");
	}
    }

    /**
     * The <code>markAssertionsRemoved</code> method marks the assertions
     * in the specified list as being removed.
     *
     * @param list a <code>List</code> of JavadocAssertion elements that have
     *        been removed
     */
    private void markAssertionsRemoved(List list) {
	int num = list.size();
	JavadocAssertion a = null;
	for (int i = 0; i < num; i++) {
	    a = (JavadocAssertion)list.get(i);
	    a.setStatus(JavadocAssertion.REMOVED);
	    a.setModified(true);
	}
    }

    /**
     * The <code>findRemovedAssertions</code> method finds the removed assertions.
     * These are the assertions that remain in the verified assertion list
     * after all the common/deprecated assertions have been removed.
     */
    private void findRemovedAssertions() {
	List removedAssertions = verifiedList.getAssertionList();
	if (removedAssertions == null || removedAssertions.size() == 0) {
	    return;
	}
	markAssertionsRemoved(removedAssertions);
	mergedList.addRemovedAssertions(removedAssertions);
	verifiedList.removeAssertions(removedAssertions);
	if (verifiedList.size() != 0) {
	    System.err.println("The verified assertion list still has "
			       + verifiedList.size() +
			       " assertions in it.  This could be an error");
	}
    }

    /**
     * The <code>main</code> method is the entry point for the merge tool.
     *
     * @param args a <code>String[]</code> containing the command line value, see usage
     *        statement for arg defintions
     */
    public static void main(String[] args) {
 	if (args.length != 3) {
 	    System.out.println(USAGE);
 	    System.exit(1);	    
 	}
	try {
	    MergeAssert ma = new MergeAssert(args[0], args[1], args[2]);
	    ma.mergeDocs();
	} catch (Exception e) {
	    System.out.println(e);
	    System.out.println();
	    e.printStackTrace();
	}
    }

} // end class MergeAssert
